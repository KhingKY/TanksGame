/****************************************************************
 * File: Form1.cs                                               *
 * Author: Dillon Allan and Jason Karpiak                       *
 * Description: Main file for game event processing.            *
 ****************************************************************/
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Input;

namespace CMPE2800_Lab02
{
    public partial class TanksForm : Form
    {
        #region Members
        Graphics _grFront;  // main graphics buffer

        // player 1 and player 2 members

        // Tanks
        Tank _tP1;
        Tank _tP2;

        // Abstract input objects
        AbstractInput _abP1;
        AbstractInput _abP2;

        // Colors 
        System.Drawing.Color _cPlayer1Color = System.Drawing.Color.Green;
        System.Drawing.Color _cPlayer2Color = System.Drawing.Color.Tan;
        #endregion

        #region Methods
        /// <summary>
        /// Initializes class-level members.
        /// </summary>
        public TanksForm()
        {
            InitializeComponent();

            _grFront = CreateGraphics();

            // test tank rendering
            _tP1 = new Tank(new PointF(400, 400), _cPlayer1Color);

            // test tank input
            _abP1 = new AbstractInput();
        }

        /// <summary>
        /// Checks Player 1 controls for keydown events,
        /// and sets AbstractInput fields accordingly.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        //private void TanksForm_KeyDown(object sender, KeyEventArgs e)
        //{
            // check for 8 directions of movement
            //if (e.KeyCode == Keys.Up && e.KeyCode == Keys.Right)
            //switch (e.KeyCode)
            //{
            //    case Keys.Up:
            //        _abP1.Up = true;
            //        break;
            //    case Keys.Down:
            //        _abP1.Down = true;
            //        break;
            //    case Keys.Left:
            //        _abP1.Left = true;
            //        break;
            //    case Keys.Right:
            //        _abP1.Right = true;
            //        break;
            //}
        //}

        //private void CheckKeys()
        //{

        //    Keyboard.IsKeyDown()
        //}

        //protected override bool Pro

        /// <summary>
        /// Each tick (25 ms) checks for new movement, rendering, 
        /// and hit detection operations to process.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tim_Updater_Tick(object sender, EventArgs e)
        {
            // process new input
            GetNewInput();
            ApplyInput(_abP1);
            ResetInput(_abP1);

            // perform buffered graphics operations
            DoubleBufferedRender();
        }

        /// <summary>
        /// Transforms shapes and redners to back buffer
        /// before replacing the front buffer.
        /// </summary>
        private void DoubleBufferedRender()
        {
            using (BufferedGraphicsContext bgc = new BufferedGraphicsContext())
            {
                using (BufferedGraphics bg = bgc.Allocate(_grFront, ClientRectangle))
                {
                    bg.Graphics.Clear(System.Drawing.Color.Black);

                    // transform and render player tanks
                    _tP1.Tick(ClientRectangle.Size);
                    _tP1.Render(bg.Graphics);

                    // draw a grid for testing render shapes.
                    for (int x = 0; x < ClientRectangle.Width; x += Shape.Tilesize)
                    {
                        bg.Graphics.DrawLine(new Pen(System.Drawing.Color.Red), x, 0, x, ClientRectangle.Height);
                    }

                    for (int y = 0; y < ClientRectangle.Height; y += Shape.Tilesize)
                    {
                        bg.Graphics.DrawLine(new Pen(System.Drawing.Color.Red), 0, y, ClientRectangle.Width, y);
                    }

                    // flip back buffer to front
                    bg.Render();
                }
            }
        }

        /// <summary>
        /// Gets new keyboard and controller states,
        /// and updates player 1 and 2's abstract input fields
        /// as necessary.
        /// </summary>
        private void GetNewInput()
        {
            // get current state of player controls
            KeyboardState kbsP1 = Keyboard.GetState();
            GamePadState gpsP2 = GamePad.GetState(PlayerIndex.One);

            // Player 1 - check input for four possible directions: 
            if (kbsP1.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Up))
                _abP1.Up = true;
            else
                _abP1.Up = false;
            if (kbsP1.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Down))
                _abP1.Down = true;
            else
                _abP1.Down = false;
            if (kbsP1.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Left))
                _abP1.Left = true;
            else
                _abP1.Left = false;
            if (kbsP1.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Right))
                _abP1.Right = true;
            else
                _abP1.Right = false;

            // check for fire cannon
            if (kbsP1.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Space))
                _abP1.Fire = true;
            else
                _abP1.Fire = false;

            // is controller 1 connected?
            if (gpsP2.IsConnected)
            {
                // Player 2 - check input for four possible directions:
                // (input is determined by left-thumbstick direction)
                
                // Up
                if (gpsP2.ThumbSticks.Left.Y > 0)
                    _abP2.Up = true;
                else
                    _abP2.Up = false;
                
                // Down
                if (gpsP2.ThumbSticks.Left.Y < 0)
                    _abP2.Up = true;
                else
                    _abP2.Up = false;

                // Left
                if (gpsP2.ThumbSticks.Left.X < 0)
                    _abP2.Up = true;
                else
                    _abP2.Up = false;

                // Right
                if (gpsP2.ThumbSticks.Left.X > 0)
                    _abP2.Up = true;
                else
                    _abP2.Up = false;

                // check input for fire cannon 
                // (user can pull trigger halfway to fire)
                if (gpsP2.Triggers.Right > 0.5)
                    _abP2.Fire = true;
                else
                    _abP2.Fire = false;
            }
        }

        /// <summary>
        /// Checks value of each field, and 
        /// updates Tank properties accordingly.
        /// </summary>
        /// <param name="input">
        /// Player input.
        /// </param>
        private void ApplyInput(AbstractInput input)
        {
            // Check up or down 
            if (input.Up)
                _tP1.m_fYSpeed = -Shape.Speed;
            else if (input.Down)
                _tP1.m_fYSpeed = Shape.Speed;
            else
                _tP1.m_fYSpeed = 0;
            
            // Check left AND right 
            if (input.Left)
                _tP1.m_fXSpeed = -Shape.Speed;
            else if (input.Right)
                _tP1.m_fXSpeed = Shape.Speed;
            else
                _tP1.m_fXSpeed = 0;

            // Check fire cannon!
        }

        /// <summary>
        /// Resets input flags.
        /// </summary>
        /// <param name="input">
        /// Player input.
        /// </param>
        private void ResetInput(AbstractInput input)
        {
            input.Up = input.Down = input.Left = 
                input.Right = input.Fire = false;
        }
        #endregion
    }
}