/****************************************************************************
 * File: Tank.cs                                                            *
 * Author: Dillon Allan and Jason Karpiak                                   *
 * Description: Class derived from Shape. Used for tanks rendered in-game.  *
 ****************************************************************************/

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CMPE2800_Lab02
{
    class Tank : Shape
    {
        #region Fields
        private Bitmap _bmSprite;                       // tank image
        private static readonly GraphicsPath _model;    // shared tank model
        private const int TankSize =  Tilesize * 9 / 10; // set size of tank model (
        public const int Speed = 10;                    // set tank speed 
        public const int RotInc = 5;                    // set rotation increment
        #endregion

        #region Methods
        /// <summary>
        /// Static constructor sets model outline.
        /// </summary>
        static Tank()
        {
            _model = new GraphicsPath();

            // tank body
            _model.AddRectangle(new RectangleF(-1 / 2f * TankSize, -2 / 6f * TankSize,
                4 / 5f * TankSize, 2 / 3f * TankSize));

            // tip of tank barrel that protrudes past tank body
            _model.AddRectangle(new RectangleF(3 / 10f * TankSize, -1 / 12f * TankSize,
                1 / 5f * TankSize, 1 / 6f * TankSize));
        }

        /// <summary>
        /// Instance constructor sets tank sprite and initial position, and 
        /// leverages base constructor to set position.
        /// </summary>
        /// <param name="position">
        /// Screen position of Tank.
        /// </param>
        /// <param name="color">
        /// Tank color.
        /// </param>
        public Tank(PlayerNumber player, PointF position, Direction initialDirection, Color color)
            : base(position, initialDirection)
        {
            // to do: get rid of color member entirely,
            //        and replace it with the bitmap
            Color = color;

            // assign bitmap member based on player number
            // 1 -> green tank, 2 -> grey tank
            //switch (player)
            //{
            //    case PlayerNumber.One:
            //        _bmSprite = Properties.Resources.Tank_Green;
            //        break;
            //    case PlayerNumber.Two:
            //        _bmSprite = Properties.Resources.Tank_Grey;
            //        break;
            //    default:
            //        throw new Exception("Player doesn't exist!");
            //}

            // set initial bearing based on initial direction
            switch (initialDirection)
            {
                case Direction.North:
                    m_fRotation = 270;
                    break;
                case Direction.South:
                    m_fRotation = 90;
                    break;
                case Direction.East:
                    m_fRotation = 0;
                    break;
                case Direction.West:
                    m_fRotation = 180;
                    break;
                case Direction.NorthEast:
                    m_fRotation = 315;
                    break;
                case Direction.SouthEast:
                    m_fRotation = 45;
                    break;
                case Direction.SouthWest:
                    m_fRotation = 135;
                    break;
                case Direction.NorthWest:
                    m_fRotation = 225;
                    break;
            }
        }

        /// <summary>
        /// Applies SRT-ordered transformations on the Tank.
        /// </summary>
        /// <returns>
        /// Returns a fully transformed clone of the Tank model.
        /// </returns>
        public override GraphicsPath GetPath()
        {
            GraphicsPath gp = _model.Clone() as GraphicsPath;
            Matrix mat = new Matrix();

            // in order: rotate, then translate
            mat.Rotate(m_fRotation);

            // set tank screen position 
            mat.Translate(Position.X, Position.Y, MatrixOrder.Append);

            // apply transformations to the GraphicsPath object
            gp.Transform(mat);

            return gp;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="gr">Screen graphics object.</param>
        public override void Render(Graphics gr)
        {

            // render each layer of the tank model in order: 
            Region baseOutline = new Region(GetPath());

            ////////////////////////////////////////////////////////////
            // IMAGE TESTING
            // Draw tank sprite to screen, with rotation working.
            //GraphicsUnit unit = GraphicsUnit.Pixel;
            //Region test = new Region(_bmSprite.GetBounds(ref unit));
            //gr.FillRegion(new TextureBrush(_bmSprite))
            //gr.DrawImage(_bmSprite, baseOutline.GetBounds(gr));
            //_bmSprite.RotateFlip(RotateFlipType.)
            ////////////////////////////////////////////////////////////

            // 1) draw tank base 
            gr.FillRegion(new HatchBrush(HatchStyle.NarrowHorizontal, Color), baseOutline);

            //////////////////////////////////////////////////////////////////////////////
            // LAYER TESTING
            // get bottom layer reference point 
            //RectangleF tankRect = baseOutline.GetBounds(gr);

            // reference geometry for tank layers
            //PointF rotatePoint = new PointF(tankRect.X, tankRect.Y);
            //float x, y, width, height;
            //RectangleF rect;
            //GraphicsPath gp = new GraphicsPath();

            // 2) barrel

            // get top left corner
            //x = tankRect.X + 1 / 2f * TankSize;
            //y = tankRect.Y + 3 / 12f * TankSize;

            // get barrel length and width
            //width = 1 / 2f * TankSize;
            //height = 1 / 6f * TankSize;

            // make barrel shape
            //rect = new RectangleF(x, y, width, height);

            //gr.FillRectangle(new SolidBrush(Color.Gray), rect);

            // 3) turret
            //width = tankRect.X + 1 / 7f * TankSize;
            //height = tankRect.Y + 1 / 12f * TankSize;
            //gr.FillEllipse(new SolidBrush(Color.Tan), width,
            //    height, 1 / 2f * TankSize, 1 / 2f * TankSize);
            ///////////////////////////////////////////////////////////////////////////////
        }
        #endregion
    }
}
