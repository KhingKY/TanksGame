/****************************************************************
 * File: Form1.cs                                               *
 * Author: Dillon Allan and Jared Karpiak                       *
 * Description: Main file for game event processing.            *
 ****************************************************************/
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;
using System.Linq;

namespace CMPE2800_Lab02
{
    public partial class TanksForm : Form
    {
        #region Members
        // background thread for processing input
        Thread _tInputProcessing;
        //game level
        Level _lvGameLevel;
        //Random number generator, used for random ammo spawns
        Random _gen = new Random();
        //bool to protect against rendering interrupt
        volatile bool _bRenderFlag;
        //*************************

        // lock object
        object _oSyncLock = new object();

        // player 1 and player 2 objects
        PlayerData _pdP1;
        PlayerData _pdP2;

        // Tanks
        Tank _tkP1;
        Tank _tkP2;

        // Starting Spawn Points 
        PointF _spP1, _spP2;

        // Abstract input objects
        AbstractInput _abP1;
        AbstractInput _abP2;

        // List of abstract inputs
        List<AbstractInput> _lPlayerInputs;

        // List of Shapes
        List<Shape> _lShapes;

        // Array of Tank and Ammo Spawns
        List<PointF> _lTankSpawns = new List<PointF>();
        List<Ammo> _lAmmoSpawns;

        int _liveAmmoSpawns;

        // Colors 
        Color _cPlayer1Color = Color.Green;
        Color _cPlayer2Color = Color.Tan;
        Color _cPlayer1MGColor = Color.Blue;
        Color _cPlayer2MGColor = Color.Yellow;
        Color _cPlayer1RocketColor = Color.Aqua;
        Color _cPlayer2RocketColor = Color.DarkOrchid;
        #endregion

        #region Methods
        /// <summary>
        /// Initializes class-level members.
        /// </summary>
        public TanksForm()
        {
            InitializeComponent();

            // initialize players
            _pdP1 = new PlayerData(PlayerNumber.One);
            _pdP2 = new PlayerData(PlayerNumber.Two);

            _tInputProcessing = new Thread(TProcessInput, 0);
            ClientSize = new Size(800, 600);
           // _tRenderThread = new Thread(DoubleBufferedRender);
            _lvGameLevel = new Level(Properties.Resources.GrassLevel, new PointF (0,0));
            _bRenderFlag = true;
            
            Text = _lvGameLevel.LevelBackground.Width.ToString() + ", " + _lvGameLevel.LevelBackground.Height.ToString();
            _lTankSpawns = _lvGameLevel._respawnPoints;
            _lAmmoSpawns = _lvGameLevel._ammoDrops;
            //add spawns to the list
            AddSpawns();

            _abP1 = new AbstractInput(PlayerNumber.One);
            _abP2 = new AbstractInput(PlayerNumber.Two);

            // test tank rendering
            _tkP1 = new Tank(_spP1, Direction.SouthEast, _cPlayer1Color);
            _tkP2 = new Tank(_spP2, Direction.NorthWest, _cPlayer2Color);

            // add inputs to input list
            _lPlayerInputs = new List<AbstractInput> { _abP1, _abP2 };

            // add tank shapes to shape list
            _lShapes = new List<Shape> { _tkP1, _tkP2 };
            //addWalls and Spawns to shape List
            for (int i = 0; i < _lvGameLevel.LevelShapeList.Count; i++)
                _lShapes.Add(_lvGameLevel.LevelShapeList[i]);
            // start background input processing thread 
            _tInputProcessing = new Thread(TProcessInput, 0);
            _tInputProcessing.IsBackground = true;
            _tInputProcessing.Start();
        }

        /// <summary>
        /// Renders one frame of gameplay.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void timer1_Tick(object sender, EventArgs e)
        {
            // render new frame
            if (_bRenderFlag)
                DoubleBufferedRender();
        }

        /////////////////////////////////////////////////////////////////////////////
        // Player keyboard controls
        // NOTE: If one GamePad is connected, the keyboard controls are disabled
        // for player 1. If two GamePads are connected, both keyboard controls
        // are disabled.
        // Player 1 controls: Arrow keys - translational movement
        //                    Right-ctrl + Arrow key - rotate tank (can't translate)
        //                    Enter - fire
        //                    '/' key: switch weapon
        // Player 2 controls: WASD - translation movement
        //                    Left-shift + WASD key - rotate tank (can't translate)
        //                    Space - fire
        //                    Q key - switch weapon
        /////////////////////////////////////////////////////////////////////////////

        /// <summary>
        /// Checks key up states, and 
        /// applies input processing for the appropriate player.
        /// </summary>
        private void TanksForm_KeyDown(object sender, KeyEventArgs e)
        {
            // send key down event to each player input
            foreach (AbstractInput ab in _lPlayerInputs)
                ab.SetKeyDownInput(e);

            //switch (e.KeyCode)
            //{
            //    // player 1 inputs
            //    case Keys.Up:
            //    case Keys.Down:
            //    case Keys.Left:
            //    case Keys.Right:
            //    case Keys.ControlKey:
            //    case Keys.Enter:
            //    case Keys.Oem2: // '/' key
            //        //case Keys.
            //        _abP1.SetKeyDownInput(e);
            //        break;

            //    // player 2 inputs
            //    case Keys.W:
            //    case Keys.A:
            //    case Keys.S:
            //    case Keys.D:
            //    case Keys.ShiftKey:
            //    case Keys.Space:
            //    case Keys.Q:
            //        _abP2.SetKeyDownInput(e);
            //        break;
            //}
        }

        /// <summary>
        /// Checks key down states, and 
        /// applies input processing for the appropriate player.
        /// </summary>
        private void TanksForm_KeyUp(object sender, KeyEventArgs e)
        {
            // send key up event to each player input
            foreach (AbstractInput ab in _lPlayerInputs)
                ab.SetKeyUpInput(e);
            //switch (e.KeyCode)
            //{
            //// player 1 inputs
            //case Keys.Up:
            //case Keys.Down:
            //case Keys.Left:
            //case Keys.Right:
            //case Keys.ControlKey:
            //case Keys.Enter:
            //case Keys.Oem2:
            //    _abP1.SetKeyUpInput(e);
            //    break;

            //// player 2 inputs
            //case Keys.W:
            //case Keys.A:
            //case Keys.S:
            //case Keys.D:
            //case Keys.ShiftKey:
            //case Keys.Space:
            //case Keys.Q:
            //    _abP2.SetKeyUpInput(e);
            //    break;
            //}
        }
        #endregion

        private void TanksForm_KeyPress(object sender, KeyPressEventArgs e)
        {
            foreach (AbstractInput ab in _lPlayerInputs)
            {
                ab.SetKeyPressInput(e);
            }
        }
        private void TanksForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            _bRenderFlag = false;
            _tInputProcessing.Join();
        }
        /// <summary>
        /// Add the spawns to the a list of spawn points
        /// </summary>
        private void AddSpawns()
        {
            //iterators for array
            //search the level blocks array for any spawns and add them to the list.
            

            //set the player 1 initial spawn point to the first one in the list
            _spP1 = _lTankSpawns[1];
            //set the player 2 initial spawn point to the furthest point from the first player
            _spP2 = FurthestSpawn(_spP1);

            //start the first ammo spawn stopwatch
          //  _aAmmoSpawns[_gen.Next(0, 4)]._stopwatch.Start();
            _liveAmmoSpawns = 0;
        }
        /// <summary>
        /// Method for finding the furthest spawn point given an original spawn
        /// </summary>
        /// <param name="StartSpawn"></param>
        /// <returns></returns>
        private PointF FurthestSpawn(PointF StartSpawn)
        {
            //variables to hold distances and the return spawnPoint
            int _iDistance = 0;
            int _iFurthestDistance = 0;
            PointF _spFurthest = StartSpawn;

            //iterate through list
            foreach (PointF sp in _lTankSpawns)
            {
                //if the spawn is not the current location
                if (sp != StartSpawn)
                {
                    //find the distance between the this spawn and the Spawn Point we entered using Pythagoras' Theorem
                    _iDistance = (int)Math.Sqrt(Math.Pow(StartSpawn.X - sp.X, 2) +
                                        Math.Pow(StartSpawn.Y - sp.Y, 2));
                    
                    //compare the distances set and add the new one if it is further
                    if (_iDistance > _iFurthestDistance)
                    {
                        _iFurthestDistance = _iDistance;
                        _spFurthest = sp;
                    }
                }
            }
            //return the furthest spawn point
            return _spFurthest;
        }
        /// <summary>
        /// Tests a given shape for intersections
        /// with other shapes in _lShapes..
        /// </summary>
        /// <param name="shape">
        /// Test shape.
        /// </param>
        /// <param name="gr">
        /// Graphics object as screen reference point.
        /// </param>
        private void DetectCollisions(Shape shape, Graphics gr)
        {
            // collision detection test:


            // 1) get shape region defined by its path
            Region shapeRegion = new Region(shape.GetPath());

        }
        
    }
}

