/********************************************************************
 * File: DynamicShape.cs                                            *
 * Author: Dillon Allan and Jason Karpiak                           *
 * Description: Class derived from Shape.                           *
 *              Used for all moving shapes rendered in-game.        *
 ********************************************************************/
using System.Drawing;
using System.Drawing.Drawing2D;

namespace CMPE2800_Lab02
{
    class DynamicShape : Shape
    {
        #region Members
        // horizontal speed
        public float m_fXSpeed = 0,

            // vertical speed
            m_fYSpeed = 0,

            // rotation (in degrees)
            m_fRotation = 0,

            // rotation increment (in degrees)
            m_fRotInc = 0;

        // shape color
        public Color Color { get; private set; }
        #endregion

        #region Methods
        /// <summary>
        /// Default instance constructor.
        /// Sets initial position and bearing of the DynamicShape.
        /// </summary>
        /// <param name="position">
        /// Screen position of the shape.
        /// </param>
        /// <param name="initialDirection">
        /// Initial direction the shape is facing.
        /// </param>
        public DynamicShape(PointF position, Color color) : base(position)
        {
            Color = color;
        }

        /// <summary>
        /// Applies SRT-ordered transformations on the dynamic shape.
        /// </summary>
        /// <returns>
        /// Returns a fully transformed clone of the dynamic shape's model.
        /// </returns>
        public override GraphicsPath GetPath()
        {
            GraphicsPath gp = _model.Clone() as GraphicsPath;
            Matrix mat = new Matrix();

            // in order: rotate, then translate
            mat.Rotate(m_fRotation);

            // set dynamic shape screen position 
            mat.Translate(Position.X, Position.Y, MatrixOrder.Append);

            // apply transformations to the GraphicsPath object
            gp.Transform(mat);
            
            return gp;
        }

        /// <summary>
        /// Fills dynamic shape's region in screen space, based on 
        /// its model.
        /// </summary>
        /// <param name="gr">
        /// Screen graphics object.
        /// </param>
        public override void Render(Graphics gr)
        {
            gr.FillRegion(new SolidBrush(Color), new Region(GetPath()));
        }

        /// <summary>
        /// Updates shape position and roration to current speed and rotation values.
        /// </summary>
        /// <param name="size">Client rectangle size.</param>
        public void Tick(/*Size size*/)
        {
            /////////////////////////////////////////////////////////////////////////
            // Old tick bounds check. Check bounds with collision testing now.
            /////////////////////////////////////////////////////////////////////////
            //// check X/Y bounds, and don't let the Shape move off-screen.
            //if (Position.X + m_fXSpeed >= 0 &&
            //    Position.X + m_fXSpeed <= size.Width)
            //    Position = new PointF(Position.X + m_fXSpeed, Position.Y);

            //// if this is a GunFire object, remove it, now that it's out of bounds
            //else if (GetType().Equals(typeof(Gunfire)))
            //    IsMarkedForDeath = true;

            //if (Position.Y + m_fYSpeed >= 0
            //    && Position.Y + m_fYSpeed <= size.Height)
            //    Position = new PointF(Position.X, Position.Y + m_fYSpeed);

            //// if this is a GunFire object, remove it, now that it's out of bounds
            //else if (GetType().Equals(typeof(Gunfire)))
            //    IsMarkedForDeath = true;
            //////////////////////////////////////////////////////////////////////////

            // update rotation
            // (reset rotation to 0 if at 360 degrees,
            //  to avoid an overflow error in the event that
            // the rotation member gets too big)
            if (m_fRotation + m_fRotInc == 360)
                m_fRotation = 0;
            m_fRotation += m_fRotInc;

            ///////////////////////////////////////////////////////////////////
            // position update testing -- bounds checking in hit detection now
            ///////////////////////////////////////////////////////////////////
            Position = new PointF(Position.X + m_fXSpeed, Position.Y + m_fYSpeed);
        }

        /// <summary>
        /// Makes a copy of the invoking DynamicShape's region,
        /// and checks if it is intersecting with the given Shape's region,
        /// with respect to the given Graphics object.
        /// </summary>
        /// <param name="shape">
        /// Shape being compared against.
        /// </param>
        /// <param name="gr">
        /// Screen graphics.
        /// </param>
        /// <returns></returns>
        public bool IsColliding(Shape shape, Graphics gr)
        {
            // create a copy dynamic shape's region
            Region rCopy = new Region(GetPath());

            // intersect the copy with the provided shape
            rCopy.Intersect(shape.GetPath());

            // if it's empty, not colliding
            if (rCopy.IsEmpty(gr))
                return false;

            // not empty, a collision has occured
            return true;
        }
        #endregion
    }
}
